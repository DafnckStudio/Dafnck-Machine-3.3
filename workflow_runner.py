import json
from datetime import datetime, timezone
from pathlib import Path

# Define paths to the JSON state files and base output directory
DNA_JSON_PATH = Path("/app/01_Machine/03_Brain/DNA.json")
STEP_JSON_PATH = Path("/app/01_Machine/03_Brain/Step.json")
PROJECT_OUTPUT_DIR_BASE = Path("/app/03_Project/")

def load_json_file(filepath: Path):
    """Loads a JSON file and returns its content or None if an error occurs."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"Error: File not found - {filepath}")
        return None
    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON in {filepath} - {e}")
        return None
    except Exception as e:
        print(f"Error: Could not load {filepath} - {e}")
        return None

def write_json_file(filepath: Path, data: dict):
    """Writes a dictionary to a JSON file. Returns True on success, False on error."""
    try:
        filepath.parent.mkdir(parents=True, exist_ok=True) # Ensure parent dir exists
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        print(f"Error writing JSON to {filepath}: {e}")
        return False

def main():
    """Main function to execute the workflow step simulation and advance state."""
    print("--- Starting workflow_runner.py (Extended Version) ---")

    dna_data = load_json_file(DNA_JSON_PATH)
    step_data = load_json_file(STEP_JSON_PATH)

    if not dna_data or not step_data:
        print("Could not load DNA.json or Step.json. Exiting.")
        print("--- workflow_runner.py finished (load error) ---")
        return

    current_step_id = dna_data.get('workflow_state', {}).get('current_step')
    current_phase = dna_data.get('workflow_state', {}).get('current_phase', 'unknown_phase')

    if not current_step_id or (isinstance(current_phase, str) and current_phase.endswith("_complete")):
        print(f"Workflow phase '{current_phase}' is complete or current_step is null.")
        print("No current step to execute based on DNA.json.")
        print("--- workflow_runner.py finished ---")
        return

    step_definition = dna_data.get('step_definitions', {}).get(current_step_id)

    if not step_definition:
        print(f"Error: Step ID '{current_step_id}' not found in DNA.json step_definitions.")
        print("--- workflow_runner.py finished (step def error) ---")
        return

    agent_name = step_definition.get('agent', 'Unknown_Agent')
    markdown_file_path = step_definition.get('file_path', 'Unknown_File_Path')

    print(f"Identified Current Step ID: {current_step_id}")
    print(f"Assigned Agent: {agent_name}")
    print(f"Associated Workflow File: {markdown_file_path}")
    print("(Note: Actual reading of workflow markdown file for context is not implemented.)")

    # Simulate Agent Action: Create Placeholder Output
    try:
        output_dir_for_step = PROJECT_OUTPUT_DIR_BASE / current_step_id
        output_dir_for_step.mkdir(parents=True, exist_ok=True)

        placeholder_output_filename = "simulated_output_via_runner.txt"
        placeholder_output_path = output_dir_for_step / placeholder_output_filename

        timestamp_utc_str_action = datetime.now(timezone.utc).isoformat()

        output_content = (
            f"Simulated output for step: {current_step_id}\n"
            f"Executed by agent: {agent_name}\n"
            f"Timestamp (workflow_runner.py): {timestamp_utc_str_action}\n"
            f"This output was generated by workflow_runner.py as a placeholder.\n"
            f"Associated workflow markdown: {markdown_file_path}\n"
        )

        with open(placeholder_output_path, 'w', encoding='utf-8') as f:
            f.write(output_content)

        print(f"Successfully created placeholder output: {placeholder_output_path.relative_to(Path('/app'))}")

    except Exception as e:
        print(f"Error creating placeholder output for step {current_step_id}: {e}")
        print("--- workflow_runner.py finished (placeholder creation error) ---")
        return

    # --- Advance Workflow State ---
    print("Attempting to advance workflow state...")

    next_step_id = step_definition.get('next_task')

    # Prepare DNA.json updates
    # It's safer to work on copies if complex logic, but here direct modification is okay
    new_timestamp_for_state_update = datetime.now(timezone.utc).isoformat()
    dna_data['metadata']['last_updated'] = new_timestamp_for_state_update

    wf_state = dna_data['workflow_state']
    wf_state['previous_step'] = current_step_id
    wf_state['current_step'] = next_step_id
    wf_state['current_task'] = next_step_id
    wf_state['session']['last_updated'] = new_timestamp_for_state_update

    progress_info = wf_state['progress']
    progress_info['completed_steps'] = progress_info.get('completed_steps', 0) + 1
    progress_info['current_step_number'] = progress_info.get('current_step_number', 0) + 1

    total_steps_for_phase = progress_info.get('total_steps', 0) # Should be set when phase starts
    if total_steps_for_phase > 0:
        progress_info['percentage'] = round((progress_info['completed_steps'] / total_steps_for_phase) * 100)
    else:
        progress_info['percentage'] = 0

    next_step_definition = None
    if next_step_id:
        next_step_definition = dna_data.get('step_definitions', {}).get(next_step_id)
        if not next_step_definition:
            print(f"Error: Next step ID '{next_step_id}' (from current step '{current_step_id}') not found in DNA.json step_definitions. Halting state update.")
            # Optionally, write DNA_data with just updated metadata if desired, then exit
            # write_json_file(DNA_JSON_PATH, dna_data)
            print("--- workflow_runner.py finished (state not advanced due to missing next step def) ---")
            return
        wf_state['next_step'] = next_step_definition.get('next_task')
        # If phase changes, progress should be reset by the logic that loads the new phase's steps
        if next_step_definition.get('phase') != current_phase:
             print(f"Phase changing from {current_phase} to {next_step_definition.get('phase')}. Progress should be reset for new phase by a dedicated phase manager or when new phase steps are loaded into DNA.json.")
             # For this script, we'll assume total_steps in progress_info is for current_phase
             # If it's the last step of the current phase's definition, but next_step_id points to a new phase,
             # the percentage might look odd until progress is reset for the new phase.
    else: # current_step_id was the last step in the sequence for this phase
        wf_state['next_step'] = None
        completed_phase_name = f"{current_phase}_complete"
        wf_state['current_phase'] = completed_phase_name
        wf_state['session']['status'] = completed_phase_name
        if total_steps_for_phase > 0 : # Ensure all steps are marked complete for this phase
             progress_info['completed_steps'] = total_steps_for_phase
             progress_info['percentage'] = 100

    # Prepare Step.json updates
    step_data['lastUpdated'] = new_timestamp_for_state_update
    step_data['validationResults']['timestamp'] = new_timestamp_for_state_update
    step_data['lastInitialization'] = new_timestamp_for_state_update # Keep this updated

    if next_step_id and next_step_definition:
        step_data['currentWorkflowStep'] = next_step_id
        step_data['currentPhase'] = next_step_definition.get('phase', current_phase)
        step_data['currentAgent'] = next_step_definition.get('agent', 'Unknown_Agent')
        step_data['nextActions'] = [
            f"Begin {next_step_id} task with @{step_data['currentAgent']}",
            "Review outputs from previous step.",
            "Proceed with defined actions for this new step."
        ]
    else: # End of current phase
        step_data['currentWorkflowStep'] = f"Phase Complete: {current_phase}"
        step_data['currentPhase'] = wf_state['current_phase']
        step_data['currentAgent'] = None # No specific agent if phase is complete
        step_data['nextActions'] = [
            f"Phase '{current_phase}' is complete.",
            "Next logical action: Initiate next phase if defined, or conclude project."
        ]

    # Write updates to files
    if write_json_file(DNA_JSON_PATH, dna_data):
        print(f"Successfully updated DNA.json. New current step: {next_step_id or 'None (Phase Complete)'}.")
    else:
        print(f"Error: Failed to write updates to DNA.json. Workflow not advanced.")
        print("--- workflow_runner.py finished (DNA write error) ---")
        return

    if write_json_file(STEP_JSON_PATH, step_data):
        print(f"Successfully updated Step.json. New current step: {next_step_id or 'None (Phase Complete)'}.")
    else:
        print(f"Error: Failed to write updates to Step.json. State may be inconsistent.")
        print("--- workflow_runner.py finished (Step write error) ---")
        return

    print("Workflow state successfully advanced.")
    print("--- workflow_runner.py finished ---")

if __name__ == "__main__":
    main()
